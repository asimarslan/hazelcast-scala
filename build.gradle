buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id "com.jfrog.bintray" version "1.5"
}

ext {
    vJUnit = '4.12'
    vScala = '2.12'
    vScalaFull = "$vScala.0-M4"
    vHazelcast = '3.6.2'
    vKryo = '3.0.3'
    vObjenesis = '2.2'
}

apply plugin: "scala"
apply plugin: "maven-publish"

sourceCompatibility = 1.8
targetCompatibility = 1.8

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}
if (version == '') {
    version = 'SNAPSHOT'
}
if (version == 'SNAPSHOT') {
    version = tsVersion(version)
}

def tsVersion(version) {
    java.text.SimpleDateFormat tsFmt = new java.text.SimpleDateFormat('yyMMddHHmm')
    tsFmt.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')))
    return "${version}-b${tsFmt.format(new Date())}"
}

repositories {
    mavenCentral()
}

dependencies {
    testCompile "junit:junit:$vJUnit"
    testCompile "org.scala-lang:scala-compiler:$vScalaFull"

    compile "org.scala-lang:scala-reflect:$vScalaFull"

    compile "com.hazelcast:hazelcast:$vHazelcast"
    compile "com.hazelcast:hazelcast-client:$vHazelcast"

    compile "javax.cache:cache-api:1.0.0"
    compile "javax.transaction:transaction-api:1.1"
    
    compile "com.esotericsoftware:kryo:$vKryo"
    compile "org.objenesis:objenesis:$vObjenesis"
    
}

jar {
    baseName = "${project.name}_$vScala"
    manifest {
        attributes "Implementation-Title": project.name, "Implementation-Version": version
    }
}

task sourceJar(type: Jar) {
    baseName "${project.name}_$vScala"
    classifier "sources"
    from sourceSets.main.allScala
}
task docsJar(type: Jar, dependsOn: scaladoc) {
    baseName "${project.name}_$vScala"
    classifier "docs"
    from scaladoc.destinationDir
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.hazelcast'
            artifactId jar.baseName

            from components.java
            artifact sourceJar
            artifact docsJar
            pom.withXml { xml ->
                def includeArtifacts = ['cache-api', 'transaction-api']
                xml.asNode().dependencies.dependency.findAll{ ! includeArtifacts.contains(it.artifactId.text()) }.each { dep ->
                    dep.scope[0].value = "provided"
                }
            }
        }
    }
}

bintray {
    user = System.properties.bintrayUser ?: "n/a"
    key = System.properties.bintrayApiKey ?: "n/a"
    dryRun = (user == "n/a" || key == "n/a" || version.startsWith('SNAPSHOT'))
    publish = !dryRun
    publications = ['maven']
    pkg {
        repo = System.properties.bintrayRepo
        name = System.properties.bintrayName
    }
}
